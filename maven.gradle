import org.gradle.api.tasks.bundling.Zip

apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
    return !project.version.toString().contains('SNAPSHOT')
}

def getRepositoryUsername() {
    return hasProperty('sonatypeUsername') ? sonatypeUsername : ''
}

def getRepositoryPassword() {
    return hasProperty('sonatypePassword') ? sonatypePassword : ''
}

def isSkipSigning() {
    return hasProperty('skipSigning') && project.property('skipSigning').toString().toBoolean()
}

afterEvaluate {
    publishing {
        publications {
            create('maven', MavenPublication) {
                from components.findByName('release')
                artifactId = project.findProperty('POM_SETTING_ARTIFACT_ID') ?: project.name
                pom {
                    name = project.findProperty('POM_SETTING_NAME') ?: project.name
                    packaging = project.findProperty('POM_SETTING_PACKAGING') ?: 'aar'
                    description = project.findProperty('POM_SETTING_DESCRIPTION') ?: ''
                    url = project.findProperty('POM_SETTING_URL') ?: ''
                    scm {
                        url = project.findProperty('POM_SETTING_SCM_URL') ?: ''
                        connection = project.findProperty('POM_SETTING_SCM_CONNECTION') ?: ''
                        developerConnection = project.findProperty('POM_SETTING_SCM_DEV_CONNECTION') ?: ''
                    }
                    licenses {
                        license {
                            name = project.findProperty('POM_SETTING_LICENCE_NAME') ?: ''
                            url = project.findProperty('POM_SETTING_LICENCE_URL') ?: ''
                            distribution = project.findProperty('POM_SETTING_LICENCE_DIST') ?: ''
                        }
                    }
                    developers {
                        developer {
                            id = project.findProperty('POM_SETTING_DEVELOPER_ID') ?: ''
                            name = project.findProperty('POM_SETTING_DEVELOPER_NAME') ?: ''
                        }
                    }
                }
            }
        }
        repositories {
            if (project.hasProperty('centralBundle') && project.property('centralBundle').toString().toBoolean()) {
                maven {
                    name = 'CentralBundle'
                    url = layout.buildDirectory.dir('central-bundle')
                }
            } else {
                maven {
                    def releasesRepoUrl = uri('https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/')
                    def snapshotsRepoUrl = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
                    url = isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl
                    credentials {
                        username = getRepositoryUsername()
                        password = getRepositoryPassword()
                    }
                }
            }
        }
    }

    signing {
        if (!isSkipSigning()) {
            required {
                isReleaseBuild() && (gradle.taskGraph.hasTask(":${project.name}:publish") || gradle.taskGraph.hasTask(":${project.name}:publishToMavenLocal"))
            }
            if (project.hasProperty('useGpgCmd') && project.property('useGpgCmd').toString().toBoolean()) {
                useGpgCmd()
            }
            sign publishing.publications.maven
        } else {
            logger.lifecycle('Signing skipped (-PskipSigning=true)')
        }
    }

    tasks.register('packageReleaseZip', Zip) {
        group = 'distribution'
        description = 'Packages release AAR, POM, sources, and javadoc into a zip archive.'
        dependsOn 'assembleRelease', 'releaseSourcesJar', 'releaseJavadocJar', 'generatePomFileForMavenPublication'
        from("$buildDir/outputs/aar") { include '*-release.aar' }
        from("$buildDir/publications/maven") { include 'pom-default.xml'; into('maven') }
        from("$buildDir/libs") { include '*-sources.jar', '*-javadoc.jar' }
        def artifactId = project.findProperty('POM_SETTING_ARTIFACT_ID') ?: project.name
        def versionName = project.version?.toString() ?: project.findProperty('VERSION_NAME') ?: 'unspecified'
        archiveBaseName.set(artifactId)
        archiveVersion.set(versionName)
        destinationDirectory.set(file("$buildDir/releasePackage"))
    }

    tasks.register('generateCentralBundleChecksums') {
        group = 'publishing'
        description = 'Generates SHA-256 and SHA-512 checksums for Central bundle contents.'
        doLast {
            def bundleDir = layout.buildDirectory.dir('central-bundle').get().asFile
            if (!bundleDir.exists()) {
                logger.lifecycle("Central bundle directory not found: ${bundleDir}")
                return
            }
            bundleDir.eachFileRecurse { file ->
                if (file.isFile()) {
                    ['SHA-256':'sha256', 'SHA-512':'sha512'].each { alg, ext ->
                        def digest = java.security.MessageDigest.getInstance(alg)
                        file.withInputStream { input ->
                            byte[] buffer = new byte[8192]
                            int read
                            while ((read = input.read(buffer)) != -1) {
                                digest.update(buffer, 0, read)
                            }
                        }
                        def checksumFile = new File(file.parentFile, "${file.name}.${ext}")
                        checksumFile.text = digest.digest().collect { String.format('%02x', it) }.join()
                    }
                }
            }
            logger.lifecycle('Checksums generated')
        }
    }

    tasks.register('zipCentralBundle', Zip) {
        group = 'publishing'
        description = 'Zips the Central bundle directory for manual upload.'
        dependsOn 'generateCentralBundleChecksums'
        def artifactId = project.findProperty('POM_SETTING_ARTIFACT_ID') ?: project.name
        def versionName = project.version?.toString() ?: project.findProperty('VERSION_NAME') ?: 'unspecified'
        archiveFileName.set("central-bundle-${artifactId}-${versionName}.zip")
        from(layout.buildDirectory.dir('central-bundle'))
        destinationDirectory.set(file("$buildDir/distributions"))
    }
}
